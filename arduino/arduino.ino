#include "src/m_learning.h"
#include <ArduinoSTL.h>
#define DIST_MAX 315
#define FPS 40.0
#include <Array.h>

#include <Servo.h>

#define SERVO_G_PIN 9
#define SERVO_D_PIN 10
#define G_CORREC -14
#define D_CORREC 8

#define CAPTEUR_US 11
#define TIMEOUT 18500
#define VITESSE_SON 340.0


#define RAYON_BASE 8.0
#define FULL_SPEED 7.0
#define FACTEUR_DISTANCE 1.5

//const PROGMEM char neuralnetwork_data[753]={3,0,0,0,4,0,0,0,20,0,0,0,4,0,0,0,-9,-12,-40,-64,-83,-8,-56,64,105,-79,53,-64,98,6,-95,64,-108,-55,-115,64,29,-96,-101,64,56,119,-103,64,-35,-127,31,-63,-33,71,-115,61,-82,-37,-103,64,126,66,28,-64,-10,81,7,-63,-96,120,-111,64,1,-39,14,65,107,78,-14,64,-12,-3,-119,-65,54,-124,-10,64,15,-85,-17,-64,118,-73,103,-64,106,20,74,-64,15,0,111,63,30,119,-78,64,-87,-54,-123,-65,-99,34,-120,64,-40,74,-6,64,57,-80,-34,63,-1,-122,104,-65,-103,43,-38,64,-74,84,110,64,27,-102,-7,64,44,58,-77,-65,-10,23,10,-63,123,124,78,-64,54,118,-82,-65,89,94,-17,64,-60,-42,-25,-64,-103,9,-83,-64,84,-9,88,64,-114,-43,-84,-65,-116,-44,16,-63,98,42,-43,-65,107,49,4,65,-108,63,-76,-64,18,-109,21,65,75,-54,-64,-64,57,-61,80,-64,-44,-30,-37,-64,-10,-8,57,63,115,-14,93,63,29,-39,-67,64,-37,-29,56,-65,-50,-42,-58,-64,-62,127,-121,64,-128,86,85,64,-23,49,4,-63,-42,-95,-42,-67,53,72,-109,-64,-114,-29,27,-64,32,39,-11,64,-58,-61,23,-63,41,-10,69,-64,105,-114,-103,-64,-43,43,67,-64,-107,-125,79,64,-4,-128,30,64,-40,-86,-91,-65,-107,57,-83,-65,101,-87,85,-64,-97,-70,70,-64,4,102,-21,-64,116,-72,106,-66,2,-4,25,-63,46,32,-102,64,77,-28,23,65,-125,96,10,65,-89,47,106,63,-116,-29,12,-63,-122,-15,-47,63,-23,-87,109,64,-105,12,-16,63,-109,-99,-18,63,4,-46,-79,-65,-61,107,-39,-64,-4,63,64,-65,-70,72,21,-63,-16,-11,12,-65,66,-60,-57,64,126,56,-57,-64,-128,48,107,-64,83,-84,-32,63,8,-119,13,64,86,-77,26,65,-126,47,38,64,-32,-118,27,-64,1,40,4,-63,-18,-42,72,-64,-43,-95,24,-63,-33,7,-62,64,78,13,12,-63,-4,70,-122,64,-97,-91,36,64,108,-39,-14,64,110,-66,-56,-65,-103,69,32,64,123,-28,15,65,-123,45,-77,-66,-65,123,-61,-64,14,121,-15,64,14,-66,-76,63,-105,102,-57,-64,113,-36,-37,-64,-40,-20,-90,64,122,-51,113,-64,-52,61,8,65,-108,26,-58,64,32,-87,-14,-64,99,21,55,64,53,-48,-123,-64,106,-38,30,65,-78,-125,-9,-65,120,-98,61,64,23,127,9,-64,-29,-43,54,64,26,-104,-12,-65,-126,106,33,-65,123,74,30,-63,-15,62,-119,64,-33,-57,-58,-64,-7,-27,-63,64,-115,-81,-84,64,97,116,-61,-65,-119,91,-74,63,-89,-112,-102,-65,87,-85,-110,-65,127,81,2,65,113,51,-66,-64,6,122,10,-63,86,-36,-110,-65,-42,-86,-107,64,-27,-10,10,63,-22,-69,30,-63,-1,99,-90,64,60,-21,-94,-64,-90,53,-21,-64,-79,80,-122,64,-76,35,-45,62,101,-50,-59,63,4,111,29,64,-12,88,-43,64,42,107,-7,64,-16,-19,-112,63,33,-89,-24,64,88,79,83,64,-46,-15,-68,64,-55,70,1,64,59,3,-9,-64,78,51,49,-65,-18,118,0,65,72,107,127,61,9,5,-38,-64,97,-53,18,-63,-35,0,-11,64,91,-103,-13,-64,83,-72,-4,-64,85,31,-21,-64,108,25,19,63,46,-85,12,-63,27,-90,-14,-64,-114,83,114,-64,37,-68,13,-63,-28,-127,41,-65,111,-110,41,63,12,124,-101,64,32,81,73,-64,18,-3,-1,64,99,-62,31,-63,72,-122,1,65,73,-7,-113,-65,101,-32,-22,-64,109,-89,-36,-66,113,-9,22,-63,-36,29,6,-63,-93,54,7,-63,-38,-55,-100,-64,125};
//const PROGMEM char neuralnetwork_data[753]={3,0,0,0,4,0,0,0,20,0,0,0,4,0,0,0,57,-76,-52,64,-31,122,-60,64,125,63,-91,-65,-123,-21,-35,-64,63,53,-22,-64,-25,-5,9,65,31,-123,107,63,72,-31,-42,64,-49,-9,21,-63,-123,-21,-59,64,-57,75,21,65,-100,-60,32,62,-111,-19,-124,64,94,-70,11,-63,-119,65,0,64,-31,122,-84,64,-86,-15,-94,63,-53,-95,29,-63,104,-111,-19,60,-86,-15,-14,63,-63,-54,-103,64,51,51,3,-63,66,96,-11,64,-90,-101,68,64,-100,-60,56,-64,-2,-44,-72,62,80,-115,11,-63,-31,122,-16,-64,-102,-103,1,-64,-66,-97,2,64,-53,-95,85,-64,-109,24,-76,-64,-86,-15,-82,-64,8,-84,-36,63,49,8,36,-64,113,61,50,-64,51,51,83,-64,82,-72,-106,64,113,61,-62,-64,111,18,43,-64,-72,30,101,63,-39,-50,25,65,6,-127,117,64,-127,-107,9,-63,109,-25,17,-63,-121,22,-123,-64,-33,79,-39,64,100,59,-65,-65,-121,22,-11,-64,-6,126,-38,-64,31,-123,25,-63,57,-76,-28,64,96,-27,-96,-64,-102,-103,-115,64,-119,65,96,62,-92,112,5,64,-63,-54,13,-63,-78,-99,-65,63,49,8,108,63,111,18,99,-65,-119,65,30,65,82,-72,-14,64,84,-29,37,-66,-127,-107,19,-63,23,-39,-118,-64,-59,32,104,64,117,-109,0,-64,-96,26,23,64,47,-35,-44,-65,25,4,-10,63,-82,71,-63,64,33,-80,-78,64,100,59,7,-64,-74,-13,-3,-67,104,-111,85,64,-10,40,-100,-64,127,106,4,64,-109,24,4,62,-59,32,104,64,-72,30,-115,64,-4,-87,-79,-66,-90,-101,-60,62,-57,75,-57,63,53,94,122,63,-117,108,13,-63,74,12,2,65,-41,-93,22,65,-104,110,-10,-64,57,-76,-128,-64,86,14,-83,62,106,-68,-76,63,-111,-19,-8,-64,51,51,-73,-64,-106,67,-13,64,-109,24,-32,-64,111,18,-125,-67,-92,112,-99,63,27,47,125,63,78,98,10,65,115,104,-67,64,63,53,20,65,74,12,-106,64,18,-125,-64,63,102,102,54,-64,-8,83,17,-63,-121,22,-91,-64,16,88,17,64,2,43,63,64,76,55,-87,63,0,0,-8,-64,49,8,-56,-64,78,98,16,-63,117,-109,40,64,29,90,-44,63,-2,-44,-40,-65,43,-121,22,62,-84,28,90,-66,35,-37,17,-64,68,-117,28,64,-31,122,-72,64,-86,-15,0,65,-41,-93,28,-63,-27,-48,-118,64,-37,-7,10,65,25,4,-6,64,-125,-64,-22,64,78,98,-80,-65,-12,-3,116,-65,102,102,-42,-65,-16,-89,46,-64,76,55,-95,-64,-123,-21,-63,-64,-12,-3,4,65,29,90,52,64,31,-123,-117,63,20,-82,19,65,78,98,-128,64,115,104,27,65,2,43,-73,-65,-33,79,-107,-64,-115,-105,0,-63,29,90,20,64,-27,-48,-22,-64,-86,-15,114,63,106,-68,26,-63,-39,-50,119,63,-55,118,14,-63,-78,-99,-17,61,61,10,11,65,-121,22,-39,-67,18,-125,-8,-64,-55,118,70,64,61,10,-41,61,4,86,-46,64,47,-35,-28,63,41,92,-73,-64,14,45,122,64,78,98,-40,64,49,8,84,64,66,96,9,65,-14,-46,25,-63,98,16,-108,64,2,43,-17,-64,2,43,11,65,-55,118,-58,-64,111,18,3,-67,-61,-11,-120,64,-123,-21,-7,64,-27,-48,-94,-66,-2,-44,-28,-64,90,100,-37,-64,39,49,0,-64,92,-113,-62,63,121,-23,-6,-64,104,-111,-87,64,8,-84,-20,63,66,96,5,-65,-39,-50,47,64,-121,22,5,65,53,94,-22,-65,-68,116,-21,-64,-23,38,23,-63,-98,-17,-13,64,-16,-89,102,-65,125};


//le plus intelligents des robots omg
//const PROGMEM char neuralnetwork_data[753] = {3, 0, 0, 0, 4, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, -55, 118, -70, 65, -18, 124, -61, 64, -96, 26, -76, 65, -84, 28, -89, -63, 43, -121, -67, -63, 102, 102, -122, -64, 10, -41, -109, -64, -97, -17, -100, 65, 20, -82, -65, 65, 107, -68, -86, -63, 117, -109, -68, 64, -78, 107, -68, 65, -119, 65, -44, -64, -100, -60, 86, 64, 31, -123, 65, -63, -82, 71, -79, -64, -117, 108, -124, -63, -82, 71, -123, -64, 127, 106, 28, -64, 127, 106, -104, 65, 78, 98, 118, 65, 63, 53, -71, -63, -123, -21, -58, 65, -8, 83, 29, 65, -125, -64, -114, -63, 88, 57, 30, -63, 72, -31, 48, 65, 2, 43, -116, 65, -34, 36, -44, -66, -92, 87, 3, -63, 18, -125, 48, 64, -12, -3, 12, -64, -23, 38, -73, 65, -107, 67, -117, 62, 123, 20, -110, 65, -53, -95, -63, 65, 76, 55, 73, -63, 119, -66, -97, 64, -106, 59, 109, -63, -96, 26, 47, 64, 102, 102, 10, 65, 43, -121, -128, 65, -82, 71, -91, 64, 39, 49, -44, -64, 72, -31, 56, 65, 104, -111, -112, 65, -107, 67, 77, 65, -20, 81, 90, -63, 31, -127, 49, -63, 10, -41, 105, -63, -117, -123, 79, -64, -37, -7, -118, -64, 6, -127, 101, 64, 98, 16, 88, -64, 111, 18, -100, -63, 125, 63, -73, -63, -113, -62, 59, 65, 53, 94, -124, 65, -111, -19, -100, 65, 127, 106, 92, -63, -45, 77, -94, -66, 98, 16, 40, -64, 25, 4, -59, -63, 47, -35, 94, 65, 49, 8, 48, -63, 113, 61, 112, -63, -72, 30, -92, -63, 39, 49, -114, 65, -79, -91, 111, 65, -43, 120, 37, -63, 2, 43, 111, -64, 72, -31, 64, 65, -23, 38, -3, 64, 121, -23, -95, 65, -94, 69, -22, -64, -104, 110, -58, 65, -86, -15, 116, 65, 100, -68, 72, -63, -88, -58, 83, -64, -14, -46, -43, 64, -37, -7, -90, 64, -45, 77, -30, -65, -70, 73, 42, 65, 115, 104, -90, -63, -104, 110, -92, -63, 39, 49, -88, -63, -98, -17, -61, -64, -70, 73, -68, -63, -104, 110, -124, 65, 27, 47, -35, -66, -51, -52, 114, 65, -57, 75, -100, -63, 88, 57, 46, 65, -128, 23, 63, -63, 47, -35, 120, 65, -29, -41, 59, -65, 61, -15, -93, 65, 86, 14, 83, 65, 106, -68, 86, 65, -96, 28, -60, -63, -111, -62, -93, 65, 86, 14, 117, -63, 8, -84, 72, 65, 78, 98, 88, 64, 102, 102, 110, -64, -7, 83, 91, -64, -57, 75, -100, 65, 109, -25, 59, 64, 88, 104, 16, 65, 29, 90, 12, -63, -109, 24, 118, -63, 98, 16, 44, -63, -6, 126, -103, -63, -109, 24, -94, 65, -125, -64, 28, 65, 63, 109, -51, 63, 117, -113, 22, -63, -90, -101, -86, -63, -51, -52, 68, 64, 23, -39, -114, -63, -125, -89, -100, 65, -53, -95, 25, 65, -92, 112, 125, 64, 40, -26, -64, 63, -53, -31, 21, -63, 39, 49, -24, 63, 98, 16, 120, -64, 12, 2, -63, -63, -86, -15, -54, -64, -63, -54, -118, -63, -12, -3, -112, 64, 39, 49, -72, 64, 123, 20, 42, -63, -37, -7, 88, 65, -8, 83, -120, -63, -63, -54, -83, -64, 23, -39, 46, 65, 49, 8, -100, 63, -35, 36, 28, 65, -57, 75, 23, -65, 80, -115, -108, 65, 33, 112, -66, 65, -125, -64, -123, 65, 113, 61, 118, -63, 29, 90, -122, -63, 14, 45, -102, -63, 35, -37, -7, 63, -35, 61, -75, 65, 47, -35, -104, 65, 51, 51, 97, 65, -31, 122, -98, -63, 109, -25, -98, -63, 111, 18, -93, -64, -78, -99, 5, 65, 35, 6, -90, -63, -113, -62, -75, -63, 41, 92, 109, -63, -72, -13, -67, 62, -100, -60, -82, -63, 115, 104, -95, 65, -12, -3, -112, 65, -123, -21, -11, 64, -94, 69, -118, 65, -109, 24, 27, -63, -104, 110, 70, -63, 86, 14, -58, -63, 12, 2, 5, 65, -74, -13, 33, -63, -107, 42, -69, 63, -76, -56, 22, 65, -90, -101, 100, 65, -37, -7, -98, -64, 14, 45, 16, 65, 88, 57, -64, 64, -74, -13, -89, 65, -80, 114, -125, -63, -115, -105, 22, -63, -68, 116, 3, -64, -45, 77, -106, -63, 47, -35, 116, -63, -4, -87, 79, -63, -119, 65, 48, 64, -66, -97, 122, -64, 88, 57, -70, 65, 125};

//test 20 20
const PROGMEM char neuralnetwork_data[2437]={4,0,0,0,4,0,0,0,20,0,0,0,20,0,0,0,4,0,0,0,-106,67,-73,-64,-109,24,124,64,-25,-5,13,-63,-113,-52,-43,63,49,8,-36,63,39,49,-44,64,-88,-58,19,65,29,90,76,63,-26,-74,115,-66,39,49,-88,64,104,-111,-7,-64,57,-76,120,-64,-9,-9,13,65,41,92,23,-64,-41,-103,-120,64,36,92,-5,-64,-35,36,-10,-65,121,-23,70,-64,37,6,121,64,113,61,6,65,-4,-87,105,-64,-77,58,59,64,55,-119,19,65,-93,-35,13,-63,-63,-54,9,64,94,-70,25,64,-84,-15,82,64,-47,34,21,-63,8,-84,116,62,-33,79,-7,-64,106,-68,124,64,2,43,103,63,-100,-60,-60,64,-16,-89,-74,63,-27,-48,29,65,-80,114,8,-64,-80,114,-8,-65,-80,114,-112,64,-127,53,-100,64,-94,69,-6,64,21,-123,107,-66,-86,11,-30,64,115,104,7,-63,-59,32,-96,-64,27,47,15,-63,35,-42,-71,64,-37,-7,54,-64,-41,-93,-112,-64,-102,-103,-23,-64,-70,73,-20,64,-59,32,-60,-64,51,51,115,-65,53,53,-98,62,-96,26,23,65,45,-78,93,-64,-123,5,13,65,43,-121,-26,-65,-8,83,29,65,109,-25,23,65,43,-41,-102,64,-16,-89,-2,-64,-123,-101,81,-66,117,-109,-120,-64,66,96,-111,64,-104,110,12,-63,10,-41,15,-63,63,53,12,65,-39,-60,55,-65,-59,32,-16,63,98,16,104,64,-92,112,-47,-64,-49,-9,-1,64,-33,79,61,-64,-31,122,10,-63,-10,40,-32,-64,-113,-62,-79,-64,96,-27,-28,64,-104,67,11,62,-102,-103,-103,-67,92,-113,-58,64,51,25,-60,-64,16,-116,23,62,-70,73,6,-63,-63,-54,-123,64,-113,-62,-127,-64,104,-111,-19,-65,2,-85,41,-65,-90,-101,-124,64,-43,120,-35,-64,29,85,-108,-65,-68,116,-125,-65,47,-35,-24,-64,-55,118,-82,-65,-57,75,-121,63,-78,-99,103,64,-76,-56,-58,64,29,90,-108,64,104,-111,-127,64,-49,71,-124,-64,88,57,-76,62,106,-68,20,63,92,-113,-42,64,-74,-13,24,-64,115,104,-15,64,-18,124,-65,-66,-90,-101,52,-64,112,61,-54,-64,66,-68,36,-64,-78,-99,47,-64,40,92,-97,-65,-85,-58,43,63,113,61,-122,64,-98,-17,-9,64,113,61,18,-63,20,-82,95,64,-16,-89,-38,64,125,63,15,-63,0,0,-68,-64,94,-70,73,63,-113,-94,-49,64,-115,-105,-82,-65,-92,112,-75,-64,-121,22,-43,63,-73,-54,-83,64,-121,22,-31,64,-76,-56,8,-63,-88,-58,-81,-64,-43,120,-43,64,0,0,-80,64,70,28,-57,62,-106,67,-1,-64,-84,28,-14,-64,-46,77,58,-64,-73,-13,93,-64,-29,-91,31,65,117,19,-26,63,-74,-13,125,61,-86,-15,-49,-64,56,-119,1,65,72,-31,106,64,43,0,-98,-65,-14,-46,-99,-65,86,14,-71,-64,-96,26,95,-64,74,12,26,65,123,20,-126,64,27,47,27,65,50,-35,-32,64,61,10,3,65,-45,77,74,-64,125,63,93,64,-39,77,-38,-64,-113,-62,-107,63,-123,-21,5,-63,119,-66,9,65,84,-29,-27,-65,115,104,-30,-64,-70,73,-36,-64,0,0,30,65,84,-29,-119,64,80,-115,23,-66,0,0,4,65,-88,-58,-21,64,-125,-64,82,64,-37,-7,-30,-64,8,-84,108,64,-80,114,-100,-64,-121,22,-103,63,-33,79,109,64,-86,-15,24,65,-119,65,-92,-64,47,-35,-16,-64,-94,69,-42,-65,-6,126,96,-65,-23,38,-107,-64,63,53,-74,-64,25,4,24,65,119,-66,9,-63,-69,-13,-11,64,-84,28,-10,64,92,-113,-30,-65,-25,77,-110,63,-109,24,18,-63,-51,-52,-116,64,119,-66,95,-65,92,-113,-70,64,-82,71,25,-64,-80,114,-72,-65,104,-111,-87,64,-82,71,33,-64,79,96,-91,62,-10,53,-51,-64,55,62,-127,-64,14,45,22,-63,-10,40,2,-63,-70,73,-4,64,-96,23,22,65,52,-113,2,-66,64,-67,-15,-64,70,102,-105,64,51,51,-77,-64,-20,38,27,65,24,45,-118,64,117,-109,-40,63,1,-4,107,-64,104,17,-85,-64,-72,30,18,-64,-23,44,95,-64,41,-4,71,64,29,90,-32,64,119,-66,79,-64,6,-127,-43,-64,6,-127,-27,63,33,-80,4,-63,63,48,14,64,-88,-58,-73,64,16,88,-127,64,37,6,105,64,-80,114,-60,64,-90,114,24,64,16,-127,23,-63,-12,-3,8,-63,4,86,16,65,-84,28,20,-63,-69,-12,21,60,55,-78,-19,63,-106,67,-5,-64,25,4,30,65,-98,-17,-25,64,33,-80,-102,64,-53,38,20,-63,-20,81,-40,63,82,-72,-62,64,-123,-21,19,-63,-63,-54,-83,-64,-117,108,7,63,-45,77,2,-64,-80,114,-48,-64,111,18,-89,64,-45,77,98,64,-16,-89,86,-64,25,4,110,64,119,-66,-53,64,16,88,-103,64,70,-74,-29,63,84,-29,-95,-64,-61,-11,8,63,94,-70,-123,-64,-33,79,9,65,-71,-52,84,-64,61,62,3,65,72,-31,-82,64,72,-31,-114,64,-111,-19,100,64,-16,-89,-58,64,2,43,-113,64,-84,28,-110,-64,-16,-89,-106,64,51,51,-117,64,68,-117,16,65,-6,-125,-22,-66,-94,69,-74,63,-87,34,59,-64,-20,81,0,-63,-68,116,11,64,92,-113,-26,63,117,-109,32,64,10,-46,-49,64,-84,-13,-67,63,66,96,-67,-64,-18,124,103,-64,123,20,2,65,-111,21,-123,64,-53,-95,17,65,12,2,59,64,-35,100,-125,-64,-66,-97,-66,-64,-61,-11,28,65,-104,110,-14,-65,0,0,-20,-64,76,55,-27,-64,23,-39,-22,-64,-35,36,-114,64,111,18,-53,-64,-78,-99,-57,64,59,-33,63,-64,91,100,-113,64,125,63,5,-63,-41,-93,4,-63,-35,36,-102,-64,35,-37,-31,64,78,98,-96,63,-117,108,-45,64,70,-74,-69,-64,121,-87,77,64,-127,-107,-101,-64,-61,-11,-72,64,28,-2,-4,-64,123,-32,5,-63,-96,26,47,-64,111,18,-17,-64,-74,-13,-3,-65,98,16,4,-63,35,-37,-43,64,-127,-107,-53,64,93,-21,3,-63,69,-74,-49,64,-53,-95,69,-64,98,16,-56,64,-41,-123,64,-64,47,-110,76,64,-12,72,29,-64,106,-73,-48,64,-90,-126,-124,63,99,-33,-77,-64,-127,-107,27,65,55,-93,-80,63,16,28,21,65,34,-37,57,63,117,-45,-103,-64,86,-64,4,-64,39,49,-56,63,-61,-11,-44,-64,-84,-36,-96,-64,86,57,20,-63,49,8,-68,-65,-17,-108,28,-63,-66,-54,-7,64,4,11,46,63,14,45,-102,64,123,20,-18,62,18,-84,-52,64,-125,-64,34,-64,-43,120,105,-67,-58,32,-16,-65,-29,67,29,-63,37,95,-34,-64,60,-2,-114,64,33,-80,58,-64,33,-39,20,65,-16,-99,-2,64,-59,-86,-122,64,41,49,40,-65,91,75,-113,64,92,-72,-102,-64,54,-28,27,-64,53,94,122,62,110,104,57,64,84,-29,69,-64,-67,-97,11,-63,-69,21,2,65,-16,7,-106,63,-53,-55,-71,-64,100,59,17,65,-97,-125,-100,63,-10,40,76,-64,-120,22,25,-64,33,-80,-14,63,-70,83,-24,-64,18,-125,-128,64,-51,16,-71,-64,84,-29,-111,64,-81,-38,-44,63,-43,120,65,64,49,8,24,65,80,-19,-74,-64,-11,122,81,64,18,79,-18,-64,-74,-13,-3,-66,123,20,18,65,76,55,73,-64,-104,110,34,-64,-20,76,-82,64,4,86,-98,-64,113,41,-38,-65,-101,-103,-67,64,97,16,40,64,-43,-72,-102,-64,-16,-89,-116,-65,78,98,-68,64,-23,38,-27,-64,113,61,-42,-64,33,-80,-46,-64,-102,90,2,64,-18,124,-17,64,-59,32,-108,64,31,51,5,65,72,49,9,-63,-73,102,94,-64,35,-37,-111,-64,-125,-64,-82,64,5,11,6,64,-25,-5,21,-63,-100,-60,-8,-64,108,79,-100,-64,41,52,-39,64,21,73,-18,64,27,47,-107,64,29,90,-94,64,-20,-71,89,-64,-4,-128,-71,63,102,-44,10,65,98,16,-40,-65,-43,-93,4,-63,27,-5,-30,64,121,-23,-22,64,116,124,-47,64,39,8,18,-63,-51,-31,-58,-65,13,-98,-47,64,-89,115,-7,64,-23,38,113,64,5,81,-66,64,-30,96,1,65,86,62,2,-63,104,86,-114,-66,-71,-52,60,64,-125,57,-125,64,115,-72,1,65,10,-41,-93,-66,77,6,-127,-66,-55,118,-30,64,7,-13,89,-64,-4,117,19,-63,-121,3,-48,-65,-73,-13,57,64,23,-39,126,64,43,7,12,-63,-115,24,-40,64,19,85,19,-63,-110,92,-59,63,-22,-42,-128,-65,16,-62,-27,-64,-84,28,4,-63,-7,34,-66,-64,119,10,-113,-64,3,-39,-38,64,2,91,-103,-65,123,-12,-97,-64,-88,70,-119,-64,-18,114,55,-64,-121,22,18,-63,-86,-15,-42,64,49,72,109,-65,121,-23,-78,64,117,86,-68,-64,-119,60,24,-63,-2,-64,-118,-64,-45,97,-10,-64,-21,-4,-52,63,-27,-48,-62,63,-16,-115,-41,-65,-67,7,30,65,81,-78,-26,-64,-122,-103,69,-64,-10,20,4,-64,63,53,-34,63,-112,21,-36,-64,59,-13,-109,-64,115,-56,-104,-65,43,-121,28,-63,-23,-58,81,64,-53,79,28,65,-66,-97,-102,64,-47,103,-84,63,37,-58,-69,64,43,53,-74,-64,110,104,17,-63,-112,-103,33,-64,113,14,-64,64,-61,-11,-24,-64,19,-82,27,65,109,-25,19,-63,71,-123,-5,63,-41,-93,-80,-65,-70,73,-72,-64,101,16,-60,-64,59,-33,3,65,121,-23,-34,-64,12,2,59,64,-37,-7,-66,-66,69,-25,-1,64,8,-84,-80,-64,12,2,35,64,39,49,96,-64,-18,124,15,-64,-102,-103,31,-63,-16,-89,-18,64,76,55,65,-64,-10,40,-36,-65,113,61,20,65,-122,-103,-119,-64,72,-31,98,64,-98,-17,-17,64,115,40,-68,64,-88,-58,-101,63,16,88,-103,-67,-119,65,96,-66,-53,-95,-7,-64,-102,71,5,65,72,-31,-54,63,109,-25,23,-63,123,20,-98,64,41,82,47,-64,115,104,-31,-65,74,12,-50,-64,-109,65,-64,63,-80,-101,-60,-65,-31,122,2,65,-8,83,99,63,-29,-91,-1,-64,84,-29,13,-64,82,-112,-114,-65,37,6,-7,-64,-14,-56,-43,64,88,97,-84,64,13,2,107,-64,-66,-87,-42,64,23,89,81,-65,-88,-58,103,64,127,106,-96,-64,-84,28,-90,-64,80,-115,-85,64,-20,81,-100,64,-35,36,-10,-64,-49,-9,-93,63,-43,125,121,-64,-123,-21,9,64,2,2,15,-63,106,108,60,-64,-21,81,-8,62,98,16,16,-64,121,-23,-102,-64,80,-115,3,-63,-70,73,-56,64,3,-6,126,-66,-23,38,-107,-64,78,98,-68,-64,-31,122,-28,-65,55,-119,29,65,49,8,-96,64,43,-121,-66,64,-9,-64,23,-64,14,45,28,-63,-125,-64,2,65,25,4,-74,-64,-121,22,57,63,53,94,18,-63,59,-33,-21,64,16,24,12,-63,-23,38,-123,64,66,96,11,65,-51,-52,-128,-64,88,57,-12,-66,-35,36,102,64,72,-57,-37,-65,-12,-3,-28,64,7,43,27,65,8,-2,24,-63,-18,124,3,65,-100,-60,-36,-64,4,86,46,-64,-84,28,50,-64,127,106,-84,-64,-121,22,-71,-65,59,-33,9,65,-80,-116,-105,-67,80,-115,79,-64,-106,67,48,64,125,63,-47,64,123,20,-26,-64,113,61,10,63,-90,-101,36,63,20,-77,-121,62,63,53,-62,64,-66,-97,8,65,-118,-82,69,-64,-37,-87,54,-64,-112,-37,-59,60,125,63,-15,-64,-128,-70,-100,64,57,4,-55,64,-105,18,9,-63,-12,-3,12,-63,82,-83,-72,64,-119,65,22,65,94,-70,-3,-64,-123,-21,119,64,-10,40,-36,-64,43,-121,-102,64,51,51,3,65,53,-80,-26,-64,88,-103,-85,-64,-88,-58,11,-63,-127,53,-48,-64,-68,-60,-85,-64,98,-112,16,-63,104,-111,-67,-65,12,2,-5,64,-84,28,12,65,-127,-107,9,65,-4,-87,11,-63,-77,-56,54,-65,-49,-9,91,64,125};


MachineLearning machine;
unsigned char memoire[] = {0, 0};
unsigned char data[] = {0, 0, 0, 0};
double rotation = 0;
double distance = 0;

unsigned long start_chrono = 0;
int speed_l = 0, speed_r = 0;

Servo servo_g, servo_d;

struct Line {
  double x1, y1;
  double x2, y2;
};

//function
double getRotation(double x1, double y1, double x2, double y2);
void goTo(double angle, double &rotation, int &speed_r, int &speed_l, bool sens = false);
Line setRotation(double rotation);
double getDistance(int pin, int timeout);
void updateRotation(double &rotation, double speed_l, double speed_r, unsigned long tm);
void setSpeed(Servo &servo, int vitesse);
int freeRam();

//main
void setup() {
  srand(analogRead(0));

  Serial.begin(9600);
  std::cout << "MemoireGe:" << freeRam() << std::endl;

  std::cout << "Construction du modele" << std::endl;
  //neural network
  machine.open(4);
  //std::cout << "Memoire4:" << freeRam() << std::endl;
  machine.addColumn(20);
  //std::cout << "Memoire10:" << freeRam() << std::endl;
  machine.addColumn(20);
  //std::cout << "Memoire20:" << freeRam() << std::endl;
  machine.addColumn(4);
  //std::cout << "Memoire4:" << freeRam() << std::endl;

  //on charge le réseau de neurones
  machine.backupTraining(neuralnetwork_data);
  std::cout << "Reseau de neurones chargé." << std::endl;

  std::cout << "Memoire:" << freeRam() << std::endl;

  //on gère les servommoteurs
  servo_g.attach(SERVO_G_PIN);
  servo_d.attach(SERVO_D_PIN);
  pinMode(CAPTEUR_US, OUTPUT);
  digitalWrite(CAPTEUR_US, LOW);
  delay(100);
}

void loop() {
  unsigned long tm = millis() - start_chrono;
  start_chrono = millis();
  updateRotation(rotation, speed_l, speed_r, tm);


  std::cout << "fps:" << 1000.0 / (double)tm << std::endl;
  std::cout << "rotation:" << rotation / PI * 180.0 << std::endl;
  //on doit maintenir la loop a une certaine fréquence
  distance = getDistance(CAPTEUR_US, TIMEOUT) * FACTEUR_DISTANCE;
  if (distance > DIST_MAX) distance = DIST_MAX;
  Serial.println("distance:"+String(distance)+"cm");

  //info réel
  data[0] = (unsigned char)(int(double(int(rotation) % 360) / 360.0 * 255.0));
  data[1] = (unsigned char)(int(distance / DIST_MAX * 255.0));

  //info de memoire
  memcpy((char*)(data + 2), memoire, 2);

  //on donne les infos au réseau de neurones
  machine.setInput((char*)data);
  machine.calcul();

  //on remplit la mémoire pour prochain passage
  memoire[0] = (unsigned char)machine.getOutput(2);
  memoire[1] = (unsigned char)machine.getOutput(3);

  //std::cout << "Motor1:" << machine.getOutput(0) << std::endl;
  //std::cout << "Motor2:" << machine.getOutput(1) << std::endl;

  //on envoie les infos moteur
  speed_l = int((machine.getOutput(0) - 0.5) * 2.0 * 100.0);
  speed_r = int((machine.getOutput(1) - 0.5) * 2.0 * 100.0);

  //goTo(90.0/180.0*PI, rotation, speed_l, speed_r);

  setSpeed(servo_g, int(speed_l * 0.6) + G_CORREC);
  setSpeed(servo_d, int(-speed_r) + D_CORREC);


  //on gère la fréquence de rafraichissement
  unsigned long duration = millis() - start_chrono;
  if (double(duration) < 1000.0 / FPS) {
    delay(int(1000.0 / FPS - double(duration)));
  }
}



//fonctions
double getRotation(double x1, double y1, double x2, double y2) {
  double deltaX = x2 - x1;
  double deltaY = y1 - y2;
  double rotation;
  if (deltaX != 0) {
    rotation = atan((double)(deltaY) / deltaX);
  } else {
    //h n'est jamais nul ici
    double h = sqrt(deltaX * deltaX + deltaY * deltaY);
    rotation = asin((double)(deltaY) / h);
  }

  if (deltaX < 0) {
    rotation += PI;
  }

  if (rotation < 0) rotation += 2 * PI;

  return rotation;
}

void goTo(double angle, double &rotation, int &speed_r, int &speed_l, bool sens = false) {
  //si la différence est de plus de 5 degres, on fait tout bouger
  if (int(abs(angle - rotation) / PI * 180.0) % 360 > 5) {
    speed_r = (sens) ? 100.0 : -100.0;
    speed_l = (sens) ? -100.0 : 100.0;
  } else {
    speed_r = 0;
    speed_l = 0;
  }
}


Line setRotation(double rotation) {
  Line line;
  //on place le baton
  line.x1 = (0 + RAYON_BASE * cos(M_PI + rotation));
  line.y1 = (0 - RAYON_BASE * sin(M_PI + rotation));
  line.x2 = (0 + RAYON_BASE * cos(rotation));
  line.y2 = (0 - RAYON_BASE * sin(rotation));
  return line;
}

double getDistance(int pin, int timeout) {
  pinMode(pin, OUTPUT);
  digitalWrite(pin, HIGH);
  delayMicroseconds(5);
  digitalWrite(pin, LOW);
  pinMode(pin, INPUT);
  double duration = (double)pulseIn(pin, HIGH, timeout);
  if (duration == 0) {
    duration = timeout;
  }

  double distance = VITESSE_SON * 100.0 * duration / 1000000.0;
  distance = distance / 2.0;
  distance = (distance > DIST_MAX) ? DIST_MAX : distance;
  return distance;
}

void updateRotation(double &rotation, double speed_l, double speed_r, unsigned long tm) {
  //intégration de la vitesse de la roue pour trouver l'angle de rotation

  //modif sur la vitesse pour qu'elle soit angulaire
  speed_r = speed_r / 100.0 * FULL_SPEED / RAYON_BASE;
  speed_l = speed_l / 100.0 * FULL_SPEED / RAYON_BASE;

  //on tourne autour de la roue gaguche
  double angle = rotation;
  Line line = setRotation(angle);

  if (speed_r != 0) {
    angle += speed_r * double(tm) / 1000.0;
    line.x2 = line.x1 + 2.0 * RAYON_BASE * cos(angle);
    line.y2 = line.y1 - 2.0 * RAYON_BASE * sin(angle);
  }

  if (speed_l != 0) {
    angle -= speed_l * double(tm) / 1000.0;
    line.x1 = line.x2 + 2.0 * RAYON_BASE * cos(M_PI + angle);
    line.y1 = line.y2 - 2.0 * RAYON_BASE * sin(M_PI + angle);
  }

  //on enregistre la rotation
  rotation = getRotation(line.x1, line.y1, line.x2, line.y2);
}

void setSpeed(Servo &servo, int vitesse) {
  servo.writeMicroseconds(map(vitesse, -100, 100, 1300, 1700));
}

int freeRam ()
{
  extern int __heap_start, *__brkval;
  int v;
  return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
}
